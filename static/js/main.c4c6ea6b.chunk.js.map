{"version":3,"sources":["components/SongListItem/StyledSongListItem.js","components/SongListItem/index.js","components/ProgressBar/StyledProgressBar.js","components/ProgressBar/index.js","components/SongPlayer/StyledSongPlayer.js","components/SongPlayer/index.js","components/App.js","hooks/useAudioPlayer.js","index.js"],"names":["StyledSongListItem","styled","li","SongListItem","song","isCurrent","onSelect","isPaused","onPlayBtn","currentTime","className","onClick","src","coverUrl","title","artist","PlayArrow","Pause","StyledProgressBar","div","ProgressBar","percentage","onChange","useState","position","setPosition","marginLeft","setMarginLeft","progressBarWidth","setProgressBarWidth","rangeRef","useRef","thumbRef","useEffect","rangeWidth","current","getBoundingClientRect","width","thumbWidth","centerThumb","centerProgressBar","style","ref","left","type","value","step","StyledSongPlayer","section","SongPlayer","onPreviousSong","onNextSong","duration","previousSong","nextSong","previousSongText","nextSongText","height","alt","background","SkipPrevious","SkipNext","StyledApp","App","audioRef","player","songs","setSongs","currentSongIndex","setCurrentSongIndex","setPause","setPercentage","setDuration","setCurrentTime","fetch","then","response","ok","json","currentSong","play","setTimeout","handlePlayBtn","prevIsPaused","pause","correctTime","seconds","min","parseInt","toString","padStart","sec","mainConfig","getCurrentDuration","e","percent","currentTarget","toFixed","time","songPlayerConfig","previousIndex","length","audio","target","songListItemConfig","selectedSong","audioIndex","findIndex","audioUrl","useAudioPlayer","audioPlayer","map","onLoadedData","onTimeUpdate","rootElement","document","getElementById","ReactDOM","render"],"mappings":"+LAEO,MAAMA,EAAqBC,IAAOC,GAAV,uqB,WCCxB,SAASC,GAAa,KAC3BC,EAD2B,UAE3BC,EAF2B,SAG3BC,EAH2B,SAI3BC,EAJ2B,UAK3BC,EAL2B,YAM3BC,IAMA,OACE,eAACT,EAAD,CACEU,UAAS,UAAKL,EAAY,WAAa,MACvCM,QAPJ,WACEL,EAASF,IAIT,UAIE,sBAAKM,UAAU,MAAf,UACE,qBAAKE,IAAKR,EAAKS,WACf,8BACGT,EAAKU,MADR,OACmBV,EAAKW,aAIzBV,GACC,sBAAKK,UAAU,MAAf,UACE,+BAAOD,IACP,wBAAQC,UAAU,WAAWC,QAASH,EAAtC,SACGD,EAAW,cAACS,EAAA,EAAD,IAAgB,cAACC,EAAA,EAAD,Y,6BC7BjC,MAAMC,EAAoBjB,IAAOkB,IAAV,gmCCCvB,SAASC,GAAY,WAAEC,EAAa,EAAf,SAAkBC,IAAa,MAAD,EACxBC,mBAAS,GADe,mBACjDC,EADiD,KACvCC,EADuC,OAEpBF,mBAAS,GAFW,mBAEjDG,EAFiD,KAErCC,EAFqC,OAGRJ,mBAAS,GAHD,mBAGjDK,EAHiD,KAG/BC,EAH+B,KAKlDC,EAAWC,mBACXC,EAAWD,mBAejB,OAbAE,qBAAU,KACR,MAAMC,EAAaJ,EAASK,QAAQC,wBAAwBC,MACtDC,EAAaN,EAASG,QAAQC,wBAAwBC,MACtDE,EAAeD,EAAa,IAAOjB,GAAc,EACjDmB,EACJF,EACCJ,EAAa,IAAOb,EACpBiB,EAAa,IAAOjB,EACvBI,EAAYJ,GACZM,EAAcY,GACdV,EAAoBW,KACnB,CAACnB,IAGF,eAACH,EAAD,WACE,qBACER,UAAU,QACV+B,MAAO,CACLJ,MAAM,GAAD,OAAKT,EAAL,SAGT,qBACElB,UAAU,QACVgC,IAAKV,EACLS,MAAO,CACLE,KAAK,GAAD,OAAKnB,EAAL,KACJE,WAAW,GAAD,OAAKA,EAAL,SAGd,uBACEkB,KAAK,QACLC,MAAOrB,EACPkB,IAAKZ,EACLgB,KAAK,OACLpC,UAAU,QACVY,SAAUA,O,MC5CX,MAAMyB,EAAmB9C,IAAO+C,QAAV,ohECEtB,SAASC,GAAW,KACzB7C,EADyB,SAEzBG,EAFyB,eAGzB2C,EAHyB,WAIzBC,EAJyB,UAKzB3C,EALyB,SAMzBc,EANyB,WAOzBD,EAPyB,YAQzBZ,EARyB,SASzB2C,EATyB,aAUzBC,EAVyB,SAWzBC,IACE,MACMzC,EAA4BT,EAA5BS,SAAUC,EAAkBV,EAAlBU,MAAOC,EAAWX,EAAXW,OAEnBwC,EACJF,GAAgBA,EAAavC,OAA7B,oBAAmDuC,EAAavC,OAC5D0C,EAAeF,GAAYA,EAASxC,OAArB,gBAAuCwC,EAASxC,OAErE,OACE,mCACE,eAACiC,EAAD,WACE,sBAAKrC,UAAU,YAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,qBAAK2B,MAAM,MAAMoB,OAAO,MAAM7C,IAAKC,EAAU6C,IAAI,eAEjD,sBAAKhD,UAAU,SAAf,UACE,6BAAKI,IACL,qCAAQC,WAGZ,qBACEL,UAAU,UACV+B,MAAO,CACLkB,WAAW,0EAAD,OAA4E9C,EAA5E,WAKhB,sBAAKH,UAAU,mBAAf,UACE,sBAAKA,UAAU,aAAf,UACE,+BAAOD,IACP,+BAAO2C,OAGT,cAAChC,EAAD,CAAaC,WAAYA,EAAYC,SAAUA,IAE/C,sBAAKZ,UAAU,aAAf,UACE,wBAAQA,UAAU,OAAOC,QAASuC,EAAlC,SACE,cAACU,EAAA,EAAD,MAEF,wBAAQlD,UAAU,OAAOC,QAASH,EAAlC,SACGD,EAAW,cAACS,EAAA,EAAD,IAAgB,cAACC,EAAA,EAAD,MAE9B,wBAAQP,UAAU,OAAOC,QAASwC,EAAlC,SACE,cAACU,EAAA,EAAD,SAIJ,sBAAKnD,UAAU,YAAf,UACE,+BAAO6C,IACP,+BAAOC,e,MC3DnB,MAAMM,EAAY7D,IAAOkB,IAAV,4oBAiCR,SAAS4C,IACd,MAAMC,EAAWjC,mBAEXkC,ECxCD,SAAwBD,GAC7B,MADuC,EAGbzC,mBAAS,IAHI,mBAGhC2C,EAHgC,KAGzBC,EAHyB,OAIS5C,mBAAS,GAJlB,mBAIhC6C,EAJgC,KAIdC,EAJc,OAKV9C,oBAAS,GALC,mBAKhChB,EALgC,KAKtB+D,EALsB,OAOH/C,mBAAS,GAPN,mBAOhCF,EAPgC,KAOpBkD,EAPoB,OAQPhD,mBAAS,GARF,mBAQhC6B,EARgC,KAQtBoB,EARsB,OASDjD,mBAAS,GATR,mBAShCd,EATgC,KASnBgE,EATmB,KAWvCxC,qBAAU,KACRyC,MAXgB,kDAWCC,MAAMC,IACjBA,EAASC,IAAID,EAASE,OAAOH,KAAKR,QAEvC,IAEH,MAAMY,EAAcb,EAAME,GACpBf,EAAea,EAAME,EAAmB,GACxCd,EAAWY,EAAME,EAAmB,GA2B1C,SAASY,EAAKhB,GACZiB,YAAW,KACTjB,EAAS7B,QAAQ6C,UAIrB,SAASE,IACPZ,GAAUa,IAAkBA,IAE5B5E,EAAWyD,EAAS7B,QAAQ6C,OAAShB,EAAS7B,QAAQiD,QAoBxD,SAASC,EAAYC,GACnB,IAAKA,EAAS,MAAO,QAErB,IAAIC,EAAMC,SAASF,EAAU,IAC1BG,WACAC,SAAS,EAAG,KAEXC,EAAMH,SAASF,EAAU,IAC1BG,WACAC,SAAS,EAAG,KAEf,MAAM,GAAN,OAAUH,EAAV,YAAiBI,GAGnB,MAAO,CACLC,WAAY,CACV1B,QACAE,mBACA/C,aACA+B,WACAoB,cACAqB,mBAhCwBC,IAC1B,MAAMC,GACHD,EAAEE,cAAcvF,YAAcqF,EAAEE,cAAc5C,SAC/C,KACA6C,QAAQ,GACJC,EAAOJ,EAAEE,cAAcvF,YAE7B8D,GAAewB,GACftB,EAAeyB,EAAKD,QAAQ,KAyB1BlB,eAGFoB,iBAAkB,CAChB/F,KAAM2E,EACN1B,eACAC,WACA/C,WACA2C,eA3EJ,WACEmB,GAAqB+B,GACnBA,EAAgB,EAAIA,EAAgB,EAAIlC,EAAMmC,OAAS,IAGpD9F,GAAUyE,EAAKhB,IAuElBb,WApEJ,WACEkB,GAAqB+B,GACnBlC,EAAMmC,OAASD,EAAgB,EAAIA,EAAgB,EAAI,IAGpD7F,GAAUyE,EAAKhB,IAgElBxD,UAAW0E,EACX5D,SAlDcwE,IAChB,MAAMQ,EAAQtC,EAAS7B,QACvBmE,EAAM7F,YAAe6F,EAAMlD,SAAW,IAAO0C,EAAES,OAAO1D,MACtD0B,EAAcuB,EAAES,OAAO1D,QAgDrBpC,YAAa4E,EAAY5E,GACzB2C,SAAUiC,EAAYjC,GACtB/B,cAGFmF,mBAAoB,CAClBlG,SA9FJ,SAA0BmG,GACxB,MAAMC,EAAaxC,EAAMyC,WACtBvG,GAASA,EAAKwG,WAAaH,EAAaG,WAEvCF,GAAc,GAChBrC,EAAoBqC,IA0FpBlG,UAAW0E,EACX3E,WACAE,YAAa4E,EAAY5E,KD9EdoG,CAAe7C,GAEhB8C,EAGV7C,EAHF2B,WACAO,EAEElC,EAFFkC,iBACAK,EACEvC,EADFuC,mBAGF,OACE,cAAC1C,EAAD,UACgC,IAA7BgD,EAAY5C,MAAMmC,OACjB,oBAAI3F,UAAU,UAAd,0BAEA,sBAAKA,UAAU,YAAf,UACE,cAACuC,EAAD,eAAgBkD,IAEhB,sBAAKzF,UAAU,QAAf,UACE,uCACA,6BACGoG,EAAY5C,MAAM6C,KAAK3G,GACtB,cAACD,EAAD,aAEEC,KAAMA,EACNC,UAAWyG,EAAY/B,YAAY6B,WAAaxG,EAAKwG,UACjDJ,GAHCpG,EAAKwG,iBAQlB,uBACElE,IAAKsB,EAELgD,aAAelB,IACbgB,EAAYtC,YAAYsB,EAAEE,cAAc5C,SAAS6C,QAAQ,KAE3DgB,aAAcH,EAAYjB,mBAN5B,SAQE,wBAAQjF,IAAKkG,EAAY/B,YAAY6B,YANhCE,EAAY/B,YAAY6B,e,MEjEzC,MAAMM,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACvD,EAAD,MAEFmD,K","file":"static/js/main.c4c6ea6b.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const StyledSongListItem = styled.li`\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  &.selected {\r\n    background-color: slategray;\r\n    background: linear-gradient(to right, white -100%, #323b44 78%);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .col {\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    p {\r\n      padding: 10px 20px;\r\n    }\r\n\r\n    img {\r\n      height: 50px;\r\n      margin: 5px 0px 5px 5px;\r\n    }\r\n  }\r\n\r\n  .play-btn {\r\n    background: transparent;\r\n    padding: 0 20px 0 15px;\r\n    color: white;\r\n    border: none;\r\n    cursor: pointer;\r\n    outline: none;\r\n  }\r\n`;\r\n","import { Pause, PlayArrow } from '@material-ui/icons';\r\nimport { StyledSongListItem } from './StyledSongListItem';\r\n\r\nexport function SongListItem({\r\n  song,\r\n  isCurrent,\r\n  onSelect,\r\n  isPaused,\r\n  onPlayBtn,\r\n  currentTime,\r\n}) {\r\n  function handleClick() {\r\n    onSelect(song);\r\n  }\r\n\r\n  return (\r\n    <StyledSongListItem\r\n      className={`${isCurrent ? 'selected' : null}`}\r\n      onClick={handleClick}\r\n    >\r\n      <div className=\"col\">\r\n        <img src={song.coverUrl}></img>\r\n        <p>\r\n          {song.title} by {song.artist}\r\n        </p>\r\n      </div>\r\n\r\n      {isCurrent && (\r\n        <div className=\"col\">\r\n          <span>{currentTime}</span>\r\n          <button className=\"play-btn\" onClick={onPlayBtn}>\r\n            {isPaused ? <PlayArrow /> : <Pause />}\r\n          </button>\r\n        </div>\r\n      )}\r\n    </StyledSongListItem>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledProgressBar = styled.div`\r\n  --progress-bar-height: 4px;\r\n\r\n  position: relative;\r\n  width: 100%;\r\n  background: transparent;\r\n\r\n  .range {\r\n    -webkit-appearance: none;\r\n    background-color: rgba(240, 9, 9, 0.397);\r\n    height: 10px;\r\n    width: 100%;\r\n    cursor: pointer;\r\n    opacity: 0;\r\n    margin: 0 auto;\r\n  }\r\n\r\n  &::before {\r\n    content: '';\r\n    background-color: slategrey;\r\n    width: 99%;\r\n    height: calc(var(--progress-bar-height) - 1px);\r\n    display: block;\r\n    position: absolute;\r\n    border-radius: 10px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    pointer-events: none;\r\n  }\r\n\r\n  .cover {\r\n    background-color: rgb(218, 55, 145);\r\n    width: 0%;\r\n    height: var(--progress-bar-height);\r\n    display: block;\r\n    position: absolute;\r\n    border-radius: 10px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n\r\n  .thumb {\r\n    width: 20px;\r\n    height: 20px;\r\n    box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.753);\r\n    background: rgb(255, 255, 255);\r\n    position: absolute;\r\n    border-radius: 50%;\r\n    top: 50%;\r\n    transform: translate(0%, -50%);\r\n  }\r\n`;\r\n","import { useState, useRef, useEffect } from 'react';\r\nimport { StyledProgressBar } from './StyledProgressBar';\r\n\r\nexport function ProgressBar({ percentage = 0, onChange }) {\r\n  const [position, setPosition] = useState(0);\r\n  const [marginLeft, setMarginLeft] = useState(0);\r\n  const [progressBarWidth, setProgressBarWidth] = useState(0);\r\n\r\n  const rangeRef = useRef();\r\n  const thumbRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const rangeWidth = rangeRef.current.getBoundingClientRect().width;\r\n    const thumbWidth = thumbRef.current.getBoundingClientRect().width;\r\n    const centerThumb = (thumbWidth / 100) * percentage * -1;\r\n    const centerProgressBar =\r\n      thumbWidth +\r\n      (rangeWidth / 100) * percentage -\r\n      (thumbWidth / 100) * percentage;\r\n    setPosition(percentage);\r\n    setMarginLeft(centerThumb);\r\n    setProgressBarWidth(centerProgressBar);\r\n  }, [percentage]);\r\n\r\n  return (\r\n    <StyledProgressBar>\r\n      <div\r\n        className=\"cover\"\r\n        style={{\r\n          width: `${progressBarWidth}px`,\r\n        }}\r\n      ></div>\r\n      <div\r\n        className=\"thumb\"\r\n        ref={thumbRef}\r\n        style={{\r\n          left: `${position}%`,\r\n          marginLeft: `${marginLeft}px`,\r\n        }}\r\n      ></div>\r\n      <input\r\n        type=\"range\"\r\n        value={position}\r\n        ref={rangeRef}\r\n        step=\"0.01\"\r\n        className=\"range\"\r\n        onChange={onChange}\r\n      />\r\n    </StyledProgressBar>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledSongPlayer = styled.section`\r\n  background: transparent;\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n\r\n  .overlay {\r\n    filter: blur(2px);\r\n    -webkit-filter: blur(2px);\r\n    height: 123%;\r\n    width: 120%;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    position: absolute;\r\n    top: -10%;\r\n    left: -10%;\r\n    opacity: 0.6;\r\n    clip-path: polygon(0 0, 100% 0, 100% 75%, 80% 93%, 31% 75%, 0 93%);\r\n  }\r\n\r\n  .cover-box {\r\n    display: flex;\r\n    position: relative;\r\n    padding: 20px;\r\n    background: transparent;\r\n  }\r\n\r\n  .cover-box-text {\r\n    display: flex;\r\n    z-index: 1;\r\n  }\r\n\r\n  .titles {\r\n    padding-left: 20px;\r\n  }\r\n\r\n  .controls-wrapper {\r\n    padding: 20px;\r\n    background: rgb(2, 0, 36);\r\n    background: linear-gradient(\r\n      180deg,\r\n      transparent 0%,\r\n      rgba(255, 255, 255, 1) 100%\r\n    );\r\n  }\r\n\r\n  .track-time {\r\n    height: 15px;\r\n    padding: 5px;\r\n    color: darkslategray;\r\n    font-weight: bold;\r\n    overflow: hidden;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    font-weight: 600;\r\n  }\r\n\r\n  img {\r\n    width: 200px;\r\n    height: 200px;\r\n    box-shadow: 0 5px 15px hsla(0, 0%, 0%, 0.3);\r\n  }\r\n\r\n  .player-box {\r\n    color: black;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 10px 20px;\r\n  }\r\n\r\n  button {\r\n    outline: none;\r\n    cursor: pointer;\r\n    border-radius: 50%;\r\n    border-style: none;\r\n    background: linear-gradient(to bottom, white -100%, #323b44 78%);\r\n    color: white;\r\n    box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.4);\r\n\r\n    &:active {\r\n      box-shadow: 0px 6px 16px rgba(0, 0, 0, 0.4);\r\n    }\r\n  }\r\n\r\n  .play {\r\n    width: 70px;\r\n    height: 70px;\r\n    margin: 0 10px;\r\n  }\r\n\r\n  .prev,\r\n  .next {\r\n    width: 50px;\r\n    height: 50px;\r\n  }\r\n\r\n  .prev-next {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n    justify-content: space-between;\r\n    color: darkslategray;\r\n    font-weight: 600;\r\n    font-size: 14px;\r\n\r\n    span:last-child {\r\n      text-align: right;\r\n    }\r\n  }\r\n`;\r\n","import { Pause, PlayArrow, SkipNext, SkipPrevious } from '@material-ui/icons';\r\nimport { ProgressBar } from '../ProgressBar';\r\nimport { StyledSongPlayer } from './StyledSongPlayer';\r\n\r\nexport function SongPlayer({\r\n  song,\r\n  isPaused,\r\n  onPreviousSong,\r\n  onNextSong,\r\n  onPlayBtn,\r\n  onChange,\r\n  percentage,\r\n  currentTime,\r\n  duration,\r\n  previousSong,\r\n  nextSong,\r\n}) {\r\n  const { coverUrl, title, artist } = song;\r\n\r\n  const previousSongText =\r\n    previousSong && previousSong.title && `Previous: ${previousSong.title}`;\r\n  const nextSongText = nextSong && nextSong.title && `Next: ${nextSong.title}`;\r\n\r\n  return (\r\n    <>\r\n      <StyledSongPlayer>\r\n        <div className=\"cover-box\">\r\n          <div className=\"cover-box-text\">\r\n            <img width=\"250\" height=\"250\" src={coverUrl} alt=\"Song cover\" />\r\n\r\n            <div className=\"titles\">\r\n              <h2>{title}</h2>\r\n              <h4>by {artist}</h4>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className=\"overlay\"\r\n            style={{\r\n              background: `linear-gradient(0deg, rgba(0, 10, 40, 0.5), rgba(0, 15, 40, 0.6)), url(${coverUrl})`,\r\n            }}\r\n          ></div>\r\n        </div>\r\n\r\n        <div className=\"controls-wrapper\">\r\n          <div className=\"track-time\">\r\n            <span>{currentTime}</span>\r\n            <span>{duration}</span>\r\n          </div>\r\n\r\n          <ProgressBar percentage={percentage} onChange={onChange} />\r\n\r\n          <div className=\"player-box\">\r\n            <button className=\"prev\" onClick={onPreviousSong}>\r\n              <SkipPrevious />\r\n            </button>\r\n            <button className=\"play\" onClick={onPlayBtn}>\r\n              {isPaused ? <PlayArrow /> : <Pause />}\r\n            </button>\r\n            <button className=\"next\" onClick={onNextSong}>\r\n              <SkipNext />\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"prev-next\">\r\n            <span>{previousSongText}</span>\r\n            <span>{nextSongText}</span>\r\n          </div>\r\n        </div>\r\n      </StyledSongPlayer>\r\n    </>\r\n  );\r\n}\r\n","import { useRef } from 'react';\r\nimport { SongListItem } from './SongListItem';\r\nimport { SongPlayer } from './SongPlayer';\r\nimport styled from 'styled-components';\r\nimport { useAudioPlayer } from '../hooks/useAudioPlayer';\r\n\r\nconst StyledApp = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  color: white;\r\n  background: rgb(228, 234, 239);\r\n  background: radial-gradient(circle, #e4eaef -13%, #43505b 98%);\r\n  min-height: 100vh;\r\n\r\n  .container {\r\n    width: 550px;\r\n    box-shadow: 0 5px 15px hsla(0, 0%, 0%, 0.3);\r\n    border-radius: 10px;\r\n    background: white;\r\n  }\r\n\r\n  .loading {\r\n    color: white;\r\n    font-weight: 800;\r\n  }\r\n\r\n  .songs {\r\n    color: darkslategray;\r\n    background-color: white;\r\n    padding: 20px;\r\n    border-radius: 0px 0px 10px 10px;\r\n    h2 {\r\n      padding-bottom: 15px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport function App() {\r\n  const audioRef = useRef();\r\n\r\n  const player = useAudioPlayer(audioRef);\r\n  const {\r\n    mainConfig: audioPlayer,\r\n    songPlayerConfig,\r\n    songListItemConfig,\r\n  } = player;\r\n\r\n  return (\r\n    <StyledApp>\r\n      {audioPlayer.songs.length === 0 ? (\r\n        <h3 className=\"loading\">'Loading...'</h3>\r\n      ) : (\r\n        <div className=\"container\">\r\n          <SongPlayer {...songPlayerConfig} />\r\n\r\n          <div className=\"songs\">\r\n            <h2>Songs</h2>\r\n            <ul>\r\n              {audioPlayer.songs.map((song) => (\r\n                <SongListItem\r\n                  key={song.audioUrl}\r\n                  song={song}\r\n                  isCurrent={audioPlayer.currentSong.audioUrl === song.audioUrl}\r\n                  {...songListItemConfig}\r\n                />\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          <audio\r\n            ref={audioRef}\r\n            key={audioPlayer.currentSong.audioUrl}\r\n            onLoadedData={(e) => {\r\n              audioPlayer.setDuration(e.currentTarget.duration.toFixed(2));\r\n            }}\r\n            onTimeUpdate={audioPlayer.getCurrentDuration}\r\n          >\r\n            <source src={audioPlayer.currentSong.audioUrl} />\r\n          </audio>\r\n        </div>\r\n      )}\r\n    </StyledApp>\r\n  );\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\nexport function useAudioPlayer(audioRef) {\r\n  const SONGS_URL = 'https://examples.devmastery.pl/songs-api/songs';\r\n\r\n  const [songs, setSongs] = useState([]);\r\n  const [currentSongIndex, setCurrentSongIndex] = useState(0);\r\n  const [isPaused, setPause] = useState(true);\r\n\r\n  const [percentage, setPercentage] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n\r\n  useEffect(() => {\r\n    fetch(SONGS_URL).then((response) => {\r\n      if (response.ok) response.json().then(setSongs);\r\n    });\r\n  }, []);\r\n\r\n  const currentSong = songs[currentSongIndex];\r\n  const previousSong = songs[currentSongIndex - 1];\r\n  const nextSong = songs[currentSongIndex + 1];\r\n\r\n  function handleSelectSong(selectedSong) {\r\n    const audioIndex = songs.findIndex(\r\n      (song) => song.audioUrl === selectedSong.audioUrl\r\n    );\r\n    if (audioIndex >= 0) {\r\n      setCurrentSongIndex(audioIndex);\r\n    }\r\n  }\r\n\r\n  function handleSkipToPreviousSong() {\r\n    setCurrentSongIndex((previousIndex) =>\r\n      previousIndex > 0 ? previousIndex - 1 : songs.length - 1\r\n    );\r\n\r\n    if (!isPaused) play(audioRef);\r\n  }\r\n\r\n  function handleSkipToNextSong() {\r\n    setCurrentSongIndex((previousIndex) =>\r\n      songs.length > previousIndex + 1 ? previousIndex + 1 : 0\r\n    );\r\n\r\n    if (!isPaused) play(audioRef);\r\n  }\r\n\r\n  function play(audioRef) {\r\n    setTimeout(() => {\r\n      audioRef.current.play();\r\n    });\r\n  }\r\n\r\n  function handlePlayBtn() {\r\n    setPause((prevIsPaused) => !prevIsPaused);\r\n\r\n    isPaused ? audioRef.current.play() : audioRef.current.pause();\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    const audio = audioRef.current;\r\n    audio.currentTime = (audio.duration / 100) * e.target.value;\r\n    setPercentage(e.target.value);\r\n  };\r\n\r\n  const getCurrentDuration = (e) => {\r\n    const percent = (\r\n      (e.currentTarget.currentTime / e.currentTarget.duration) *\r\n      100\r\n    ).toFixed(2);\r\n    const time = e.currentTarget.currentTime;\r\n\r\n    setPercentage(+percent);\r\n    setCurrentTime(time.toFixed(2));\r\n  };\r\n\r\n  function correctTime(seconds) {\r\n    if (!seconds) return '00:00';\r\n\r\n    let min = parseInt(seconds / 60)\r\n      .toString()\r\n      .padStart(2, '0');\r\n\r\n    let sec = parseInt(seconds % 60)\r\n      .toString()\r\n      .padStart(2, '0');\r\n\r\n    return `${min}:${sec}`;\r\n  }\r\n\r\n  return {\r\n    mainConfig: {\r\n      songs,\r\n      currentSongIndex,\r\n      percentage,\r\n      duration,\r\n      setDuration,\r\n      getCurrentDuration,\r\n      currentSong,\r\n    },\r\n\r\n    songPlayerConfig: {\r\n      song: currentSong,\r\n      previousSong,\r\n      nextSong,\r\n      isPaused,\r\n      onPreviousSong: handleSkipToPreviousSong,\r\n      onNextSong: handleSkipToNextSong,\r\n      onPlayBtn: handlePlayBtn,\r\n      onChange: onChange,\r\n      currentTime: correctTime(currentTime),\r\n      duration: correctTime(duration),\r\n      percentage,\r\n    },\r\n\r\n    songListItemConfig: {\r\n      onSelect: handleSelectSong,\r\n      onPlayBtn: handlePlayBtn,\r\n      isPaused,\r\n      currentTime: correctTime(currentTime),\r\n    },\r\n  };\r\n}\r\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./components/App\";\n\nimport \"./styles.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}