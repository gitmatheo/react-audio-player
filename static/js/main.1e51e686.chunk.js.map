{"version":3,"sources":["components/SongListItem/StyledSongListItem.js","components/SongListItem/index.js","components/ProgressBar/StyledProgressBar.js","components/ProgressBar/index.js","components/SongPlayer/StyledSongPlayer.js","components/SongPlayer/index.js","components/App.js","hooks/useAudioPlayer.js","index.js"],"names":["StyledSongListItem","styled","li","SongListItem","song","isCurrent","onSelect","isPaused","onPlayPause","currentTime","className","onClick","src","coverUrl","title","artist","PlayArrow","Pause","StyledProgressBar","div","ProgressBar","percentage","onChange","useState","position","setPosition","marginLeft","setMarginLeft","progressBarWidth","setProgressBarWidth","rangeRef","useRef","thumbRef","useEffect","rangeWidth","current","getBoundingClientRect","width","thumbWidth","centerThumb","centerProgressBar","style","ref","left","type","value","step","StyledSongPlayer","section","SongPlayer","isMuted","isLooping","onLoop","onMute","onSkipToPreviousSong","onSkipToNextSong","duration","previousSong","nextSong","previousSongText","nextSongText","height","alt","background","VolumeOff","VolumeUp","SkipPrevious","SkipNext","Loop","StyledApp","App","audioRef","player","songs","setSongs","currentSongIndex","setCurrentSongIndex","setPause","setMute","setLoop","setPercentage","setDuration","setCurrentTime","fetch","then","response","ok","json","currentSong","handlePlayPause","prevIsPaused","play","pause","setStateOfAudioRef","setTimeout","muted","loop","correctTime","seconds","min","parseInt","toString","padStart","sec","mainConfig","getCurrentDuration","e","percent","currentTarget","toFixed","time","songPlayerConfig","previousIndex","length","audio","target","songListItemConfig","selectedSong","audioIndex","findIndex","audioUrl","useAudioPlayer","audioPlayer","map","onLoadedData","onTimeUpdate","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.1e51e686.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const StyledSongListItem = styled.li`\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  &.selected {\r\n    background-color: slategray;\r\n    background: linear-gradient(to right, white -100%, #323b44 78%);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .col {\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    p {\r\n      padding: 10px 20px;\r\n    }\r\n\r\n    img {\r\n      height: 50px;\r\n      margin: 5px 0px 5px 5px;\r\n    }\r\n  }\r\n\r\n  .play-btn {\r\n    background: transparent;\r\n    padding: 0 20px 0 15px;\r\n    color: white;\r\n    border: none;\r\n    cursor: pointer;\r\n    outline: none;\r\n  }\r\n`;\r\n","import { Pause, PlayArrow } from '@material-ui/icons';\r\nimport { StyledSongListItem } from './StyledSongListItem';\r\n\r\nexport function SongListItem({\r\n  song,\r\n  isCurrent,\r\n  onSelect,\r\n  isPaused,\r\n  onPlayPause,\r\n  currentTime,\r\n}) {\r\n  function handleClick() {\r\n    onSelect(song);\r\n  }\r\n\r\n  return (\r\n    <StyledSongListItem\r\n      className={`${isCurrent ? 'selected' : null}`}\r\n      onClick={handleClick}\r\n    >\r\n      <div className=\"col\">\r\n        <img src={song.coverUrl}></img>\r\n        <p>\r\n          {song.title} by {song.artist}\r\n        </p>\r\n      </div>\r\n\r\n      {isCurrent && (\r\n        <div className=\"col\">\r\n          <span>{currentTime}</span>\r\n          <button className=\"play-btn\" onClick={onPlayPause}>\r\n            {isPaused ? <PlayArrow /> : <Pause />}\r\n          </button>\r\n        </div>\r\n      )}\r\n    </StyledSongListItem>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledProgressBar = styled.div`\r\n  --progress-bar-height: 4px;\r\n\r\n  position: relative;\r\n  width: 100%;\r\n  background: transparent;\r\n\r\n  .range {\r\n    -webkit-appearance: none;\r\n    background-color: rgba(240, 9, 9, 0.397);\r\n    height: 10px;\r\n    width: 100%;\r\n    cursor: pointer;\r\n    opacity: 0;\r\n    margin: 0 auto;\r\n  }\r\n\r\n  &::before {\r\n    content: '';\r\n    background-color: slategrey;\r\n    width: 99%;\r\n    height: calc(var(--progress-bar-height) - 1px);\r\n    display: block;\r\n    position: absolute;\r\n    border-radius: 10px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    pointer-events: none;\r\n  }\r\n\r\n  .cover {\r\n    background-color: rgb(218, 55, 145);\r\n    width: 0%;\r\n    height: var(--progress-bar-height);\r\n    display: block;\r\n    position: absolute;\r\n    border-radius: 10px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n\r\n  .thumb {\r\n    width: 20px;\r\n    height: 20px;\r\n    box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.753);\r\n    background: rgb(255, 255, 255);\r\n    position: absolute;\r\n    border-radius: 50%;\r\n    top: 50%;\r\n    transform: translate(0%, -50%);\r\n  }\r\n`;\r\n","import { useState, useRef, useEffect } from 'react';\r\nimport { StyledProgressBar } from './StyledProgressBar';\r\n\r\nexport function ProgressBar({ percentage = 0, onChange }) {\r\n  const [position, setPosition] = useState(0);\r\n  const [marginLeft, setMarginLeft] = useState(0);\r\n  const [progressBarWidth, setProgressBarWidth] = useState(0);\r\n\r\n  const rangeRef = useRef();\r\n  const thumbRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const rangeWidth = rangeRef.current.getBoundingClientRect().width;\r\n    const thumbWidth = thumbRef.current.getBoundingClientRect().width;\r\n    const centerThumb = (thumbWidth / 100) * percentage * -1;\r\n    const centerProgressBar =\r\n      thumbWidth +\r\n      (rangeWidth / 100) * percentage -\r\n      (thumbWidth / 100) * percentage;\r\n    setPosition(percentage);\r\n    setMarginLeft(centerThumb);\r\n    setProgressBarWidth(centerProgressBar);\r\n  }, [percentage]);\r\n\r\n  return (\r\n    <StyledProgressBar>\r\n      <div\r\n        className=\"cover\"\r\n        style={{\r\n          width: `${progressBarWidth}px`,\r\n        }}\r\n      ></div>\r\n      <div\r\n        className=\"thumb\"\r\n        ref={thumbRef}\r\n        style={{\r\n          left: `${position}%`,\r\n          marginLeft: `${marginLeft}px`,\r\n        }}\r\n      ></div>\r\n      <input\r\n        type=\"range\"\r\n        value={position}\r\n        ref={rangeRef}\r\n        step=\"0.01\"\r\n        className=\"range\"\r\n        onChange={onChange}\r\n      />\r\n    </StyledProgressBar>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledSongPlayer = styled.section`\r\n  background: transparent;\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n\r\n  .overlay {\r\n    filter: blur(2px);\r\n    -webkit-filter: blur(2px);\r\n    height: 123%;\r\n    width: 120%;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    position: absolute;\r\n    top: -10%;\r\n    left: -10%;\r\n    opacity: 0.6;\r\n    clip-path: polygon(0 0, 100% 0, 100% 75%, 80% 93%, 31% 75%, 0 93%);\r\n  }\r\n\r\n  .cover-box {\r\n    display: flex;\r\n    position: relative;\r\n    padding: 20px;\r\n    background: transparent;\r\n  }\r\n\r\n  .cover-box-text {\r\n    display: flex;\r\n    z-index: 1;\r\n  }\r\n\r\n  .titles {\r\n    padding-left: 20px;\r\n  }\r\n\r\n  .controls-wrapper {\r\n    padding: 20px;\r\n    background: rgb(2, 0, 36);\r\n    background: linear-gradient(\r\n      180deg,\r\n      transparent 0%,\r\n      rgba(255, 255, 255, 1) 100%\r\n    );\r\n  }\r\n\r\n  .track-time {\r\n    height: 15px;\r\n    padding: 5px;\r\n    color: darkslategray;\r\n    font-weight: bold;\r\n    overflow: hidden;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    font-weight: 600;\r\n  }\r\n\r\n  img {\r\n    width: 200px;\r\n    height: 200px;\r\n    box-shadow: 0 5px 15px hsla(0, 0%, 0%, 0.3);\r\n  }\r\n\r\n  .player-box {\r\n    color: black;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 10px 20px;\r\n  }\r\n\r\n  button {\r\n    outline: none;\r\n    cursor: pointer;\r\n    border-radius: 50%;\r\n    border-style: none;\r\n    background: linear-gradient(to bottom, white -100%, #323b44 78%);\r\n    color: white;\r\n    box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.4);\r\n    margin: 0 7px;\r\n\r\n    &:active {\r\n      box-shadow: 0px 6px 16px rgba(0, 0, 0, 0.4);\r\n    }\r\n  }\r\n\r\n  .play {\r\n    width: 70px;\r\n    height: 70px;\r\n  }\r\n\r\n  .prev,\r\n  .next {\r\n    width: 50px;\r\n    height: 50px;\r\n  }\r\n\r\n  .mute,\r\n  .loop {\r\n    font-size: 12px;\r\n    width: 35px;\r\n    height: 35px;\r\n  }\r\n\r\n  .active {\r\n    color: rgb(218, 55, 145);\r\n  }\r\n\r\n  .prev-next {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n    justify-content: space-between;\r\n    color: darkslategray;\r\n    font-weight: 600;\r\n    font-size: 14px;\r\n\r\n    span:last-child {\r\n      text-align: right;\r\n    }\r\n  }\r\n`;\r\n","import {\r\n  Loop,\r\n  Pause,\r\n  PlayArrow,\r\n  SkipNext,\r\n  SkipPrevious,\r\n  VolumeUp,\r\n  VolumeOff,\r\n} from '@material-ui/icons';\r\nimport { ProgressBar } from '../ProgressBar';\r\nimport { StyledSongPlayer } from './StyledSongPlayer';\r\n\r\nexport function SongPlayer({\r\n  song,\r\n  isPaused,\r\n  isMuted,\r\n  isLooping,\r\n  onLoop,\r\n  onMute,\r\n  onSkipToPreviousSong,\r\n  onSkipToNextSong,\r\n  onPlayPause,\r\n  onChange,\r\n  percentage,\r\n  currentTime,\r\n  duration,\r\n  previousSong,\r\n  nextSong,\r\n}) {\r\n  const { coverUrl, title, artist } = song;\r\n\r\n  const previousSongText =\r\n    previousSong && previousSong.title && `Previous: ${previousSong.title}`;\r\n  const nextSongText = nextSong && nextSong.title && `Next: ${nextSong.title}`;\r\n\r\n  const active = `${isLooping && 'active'}`;\r\n\r\n  return (\r\n    <>\r\n      <StyledSongPlayer>\r\n        <div className=\"cover-box\">\r\n          <div className=\"cover-box-text\">\r\n            <img width=\"250\" height=\"250\" src={coverUrl} alt=\"Song cover\" />\r\n\r\n            <div className=\"titles\">\r\n              <h2>{title}</h2>\r\n              <h4>by {artist}</h4>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className=\"overlay\"\r\n            style={{\r\n              background: `linear-gradient(0deg, rgba(0, 10, 40, 0.5), rgba(0, 15, 40, 0.6)), url(${coverUrl})`,\r\n            }}\r\n          ></div>\r\n        </div>\r\n\r\n        <div className=\"controls-wrapper\">\r\n          <div className=\"track-time\">\r\n            <span>{currentTime}</span>\r\n            <span>{duration}</span>\r\n          </div>\r\n\r\n          <ProgressBar percentage={percentage} onChange={onChange} />\r\n\r\n          <div className=\"player-box\">\r\n            <button className=\"mute\" onClick={onMute}>\r\n              {isMuted ? <VolumeOff /> : <VolumeUp />}\r\n            </button>\r\n            <button className=\"prev\" onClick={onSkipToPreviousSong}>\r\n              <SkipPrevious />\r\n            </button>\r\n            <button className=\"play\" onClick={onPlayPause}>\r\n              {isPaused ? <PlayArrow /> : <Pause />}\r\n            </button>\r\n            <button className=\"next\" onClick={onSkipToNextSong}>\r\n              <SkipNext />\r\n            </button>\r\n\r\n            <button\r\n              className={`loop ${isLooping && 'active'}`}\r\n              onClick={onLoop}\r\n            >\r\n              {isLooping ? <Loop /> : <Loop />}\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"prev-next\">\r\n            <span>{previousSongText}</span>\r\n            <span>{nextSongText}</span>\r\n          </div>\r\n        </div>\r\n      </StyledSongPlayer>\r\n    </>\r\n  );\r\n}\r\n","import { useRef } from 'react';\r\nimport { SongListItem } from './SongListItem';\r\nimport { SongPlayer } from './SongPlayer';\r\nimport styled from 'styled-components';\r\nimport { useAudioPlayer } from '../hooks/useAudioPlayer';\r\n\r\nconst StyledApp = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  color: white;\r\n  background: rgb(228, 234, 239);\r\n  background: radial-gradient(circle, #e4eaef -13%, #43505b 98%);\r\n  min-height: 100vh;\r\n\r\n  .container {\r\n    width: 550px;\r\n    box-shadow: 0 5px 15px hsla(0, 0%, 0%, 0.3);\r\n    border-radius: 10px;\r\n    background: white;\r\n  }\r\n\r\n  .loading {\r\n    color: white;\r\n    font-weight: 800;\r\n  }\r\n\r\n  .songs {\r\n    color: darkslategray;\r\n    background-color: white;\r\n    padding: 20px;\r\n    border-radius: 0px 0px 10px 10px;\r\n    h2 {\r\n      padding-bottom: 15px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport function App() {\r\n  const audioRef = useRef();\r\n\r\n  const player = useAudioPlayer(audioRef);\r\n  const {\r\n    mainConfig: audioPlayer,\r\n    songPlayerConfig,\r\n    songListItemConfig,\r\n  } = player;\r\n\r\n  return (\r\n    <StyledApp>\r\n      {audioPlayer.songs.length === 0 ? (\r\n        <h3 className=\"loading\">'Loading...'</h3>\r\n      ) : (\r\n        <div className=\"container\">\r\n          <SongPlayer {...songPlayerConfig} />\r\n\r\n          <div className=\"songs\">\r\n            <h2>Songs</h2>\r\n            <ul>\r\n              {audioPlayer.songs.map((song) => (\r\n                <SongListItem\r\n                  key={song.audioUrl}\r\n                  song={song}\r\n                  isCurrent={audioPlayer.currentSong.audioUrl === song.audioUrl}\r\n                  {...songListItemConfig}\r\n                />\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          <audio\r\n            ref={audioRef}\r\n            key={audioPlayer.currentSong.audioUrl}\r\n            onLoadedData={(e) => {\r\n              audioPlayer.setDuration(e.currentTarget.duration.toFixed(2));\r\n            }}\r\n            onTimeUpdate={audioPlayer.getCurrentDuration}\r\n          >\r\n            <source src={audioPlayer.currentSong.audioUrl} />\r\n          </audio>\r\n        </div>\r\n      )}\r\n    </StyledApp>\r\n  );\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\nexport function useAudioPlayer(audioRef) {\r\n  const SONGS_URL = 'https://examples.devmastery.pl/songs-api/songs';\r\n\r\n  const [songs, setSongs] = useState([]);\r\n  const [currentSongIndex, setCurrentSongIndex] = useState(0);\r\n  const [isPaused, setPause] = useState(true);\r\n  const [isMuted, setMute] = useState(false);\r\n  const [isLooping, setLoop] = useState(false);\r\n\r\n  const [percentage, setPercentage] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n\r\n  useEffect(() => {\r\n    fetch(SONGS_URL).then((response) => {\r\n      if (response.ok) response.json().then(setSongs);\r\n    });\r\n  }, []);\r\n\r\n  const currentSong = songs[currentSongIndex];\r\n  const previousSong = songs[currentSongIndex - 1];\r\n  const nextSong = songs[currentSongIndex + 1];\r\n\r\n  function handlePlayPause() {\r\n    setPause((prevIsPaused) => !prevIsPaused);\r\n    isPaused ? audioRef.current.play() : audioRef.current.pause();\r\n  }\r\n\r\n  function handleMute() {\r\n    setMute(!audioRef.current.muted);\r\n    audioRef.current.muted = !isMuted;\r\n  }\r\n\r\n  function handleLoop() {\r\n    setLoop(!audioRef.current.loop);\r\n    audioRef.current.loop = !isLooping;\r\n  }\r\n\r\n  function handleSkipToPreviousSong() {\r\n    setCurrentSongIndex((previousIndex) =>\r\n      previousIndex > 0 ? previousIndex - 1 : songs.length - 1\r\n    );\r\n\r\n    setStateOfAudioRef();\r\n  }\r\n\r\n  function handleSkipToNextSong() {\r\n    setCurrentSongIndex((previousIndex) =>\r\n      songs.length > previousIndex + 1 ? previousIndex + 1 : 0\r\n    );\r\n\r\n    setStateOfAudioRef();\r\n  }\r\n\r\n  function handleSelectSong(selectedSong) {\r\n    const audioIndex = songs.findIndex(\r\n      (song) => song.audioUrl === selectedSong.audioUrl\r\n    );\r\n    if (audioIndex >= 0) {\r\n      setCurrentSongIndex(audioIndex);\r\n    }\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    const audio = audioRef.current;\r\n    audio.currentTime = (audio.duration / 100) * e.target.value;\r\n    setPercentage(e.target.value);\r\n  };\r\n\r\n  function setStateOfAudioRef() {\r\n    setTimeout(() => {\r\n      if (!isPaused) audioRef.current.play();\r\n      if (isMuted) audioRef.current.muted = true;\r\n      if (isLooping) audioRef.current.loop = true;\r\n    });\r\n  }\r\n\r\n  const getCurrentDuration = (e) => {\r\n    const percent = (\r\n      (e.currentTarget.currentTime / e.currentTarget.duration) *\r\n      100\r\n    ).toFixed(2);\r\n    const time = e.currentTarget.currentTime;\r\n\r\n    setPercentage(+percent);\r\n    setCurrentTime(time.toFixed(2));\r\n  };\r\n\r\n  function correctTime(seconds) {\r\n    if (!seconds) return '00:00';\r\n\r\n    let min = parseInt(seconds / 60)\r\n      .toString()\r\n      .padStart(2, '0');\r\n\r\n    let sec = parseInt(seconds % 60)\r\n      .toString()\r\n      .padStart(2, '0');\r\n\r\n    return `${min}:${sec}`;\r\n  }\r\n\r\n  return {\r\n    mainConfig: {\r\n      songs,\r\n      currentSongIndex,\r\n      percentage,\r\n      duration,\r\n      setDuration,\r\n      getCurrentDuration,\r\n      currentSong,\r\n    },\r\n\r\n    songPlayerConfig: {\r\n      song: currentSong,\r\n      isMuted,\r\n      previousSong,\r\n      isPaused,\r\n      nextSong,\r\n      isLooping,\r\n      onPlayPause: handlePlayPause,\r\n      onMute: handleMute,\r\n      onLoop: handleLoop,\r\n      onSkipToPreviousSong: handleSkipToPreviousSong,\r\n      onSkipToNextSong: handleSkipToNextSong,\r\n      onChange: handleChange,\r\n      currentTime: correctTime(currentTime),\r\n      duration: correctTime(duration),\r\n      percentage,\r\n    },\r\n\r\n    songListItemConfig: {\r\n      isPaused,\r\n      onPlayPause: handlePlayPause,\r\n      onSelect: handleSelectSong,\r\n      currentTime: correctTime(currentTime),\r\n    },\r\n  };\r\n}\r\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./components/App\";\n\nimport \"./styles.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}